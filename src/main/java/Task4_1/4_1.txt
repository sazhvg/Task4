Завдання 2.
Напиши відповіді на питання

• Які існують підходи проектування систем?

    Наступні підходи:
        - монолітні системи;
        - розділені системи;
        -


• Що таке монолітні систем. Переваги та недоліки.

    Монолітні системи - системи, які вміщають в себе весь комплекс коду та працюють в рамках однієї віртуальної машини.
    Переваги: взаімодія між частинами програми; легко зрозуміти логіку коду.
    Недоліки: високі витрати з тестування та перевипуску оновлень.


• Що таке розділені системи.

    Системи, що розділені на окреми частини, які називаються сервісами. Сервіси - програми, які фокусуються на вирішенні
    окремої задачі або кількох пов'язаних задач.


• Як ще називають розділені системи.

    Сервісно-ориєнтованою архітектурою.


• Різниця мікросервісів та сервісів.

    Мікросервіс - сервіс, що вирішує одну невелику задачу.


• Переваги та недоліки мікросервісного підходу.

    Переваги: можуть писатися окремими командами;
               можуть писатися на інших мовах програмуваня;
               дозволяють гнучко маштабувать програму в залежності від навантаження.
    Недоліки: важко тестувати;
                потребують додаткових витрат для запуску та налаштуванню.
                в розподіленних системах складніше забезпечити безпеку.
                може виникнути зайва кількість цих мікросервісів, що ускладнює керованість.


• За допомогою яких інструментів можна структурувати програму.

    Групування класів за пакетами;
    створення модулів.

• Яких правил варто дотримуватись при використанні пакетів.

    Деталізовано (інформаційно) давати назву пакетам.
    В середені пакету повинні бути класи, що пов'язані між собою по суті.
    Пакет не варто перевантажувати (зазвичай до 20 класів).

• Які шари зазвичай виділяють при проектуванні програми.

    n шарова архітектура - 4 шара (зазвичай, але може бути ще додаткові, якщо в цьому є потреба):
        презентаційний шар;
        рівень контролерів;
        рівень бізнес-логіки;
        рівень роботи с даними.


• Для чого використовують модулі.

    Для виділення та групування коду з метою оптимізації великої програми;
    Для виділення чогось спільного в окрему одиницю.


• В чому полягає принцип YAGNI.

    Принцип, за яким проєктується програма: не треба робити запас коду (наперед), який не потрібен на поточний час.


• В чому полягає принцип SOLID (розшифрування).

        Кожний клас повинен відповідати за одну операцію.
        Класи повинні бути відкритими для розширення, та закритими до модифікацій.
        Якщо клас є підтипом суперкласу, то люби об'єкти типа суперкласу, можуть замінюватися
            об'єктами класу без негативних наслідків для функціональності програми.
        Не варто ставити клієнта в залежність від методів, які він не використовує.
        Модулі верхнього рівня не повинні залежати від модулей нижнього рівня. І ті,
               і інші повинні залежати від абстракций. Абстракції не повинні залежати від деталей. Деталі повинні залежати від абстракций.


• Якими повинні бути методи.

    Метод повинен вирішувати одну задачу.
    Назва повінна відпровідати дії.

• За якими ознаками варто об’єднувати методи.

    Групувати методи таким чином, щоб відповідати по суті класу (сфері застосуванню класу), в якому вони створені.
    Функціонально спорідненні методи.